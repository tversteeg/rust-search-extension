var C=["Deprecated","Nothing. This lint has been deprecated.","Allow"];var lintsIndex={"single_match":["Warn","Checks for matches with a single arm where an if let\nwill usually suffice."],"should_implement_trait":["Warn","Checks for methods that should live in a trait\nimplementation of a std trait (see [llogiq's blog\npos"],"verbose_file_reads":[C[2],"Checks for use of File::read_to_end and File::read_to_string."],"unwrap_used":[C[2],"Checks for .unwrap() calls on Options and on Results."],"inherent_to_string":["Warn","Checks for the definition of inherent methods with a signature of to_string(&self) -> String."],"main_recursion":["Warn","Checks for recursion using the entrypoint."],"collapsible_if":["Warn","Checks for nested if statements which can be collapsed\nby &&-combining their conditions and for else"],"maybe_infinite_iter":[C[2],"Checks for iteration that may be infinite."],"invalid_ref":[C[0],C[1]],"unsafe_vector_initialization":[C[0],C[1]],"result_map_unit_fn":["Warn","Checks for usage of result.map(f) where f is a function\nor closure that returns the unit type ()."],"unnecessary_mut_passed":["Warn","Detects passing a mutable reference to a function that only\nrequires an immutable reference."],"zero_sized_map_values":[C[2],"Checks for maps with zero-sized value types anywhere in the code."],"zero_ptr":["Warn","Catch casts from 0 to some pointer type"],"debug_assert_with_mut_call":[C[2],"Checks for function/method calls with a mutable\nparameter in debug_assert!, debug_assert_eq! and deb"],"unneeded_wildcard_pattern":["Warn","Checks for tuple patterns with a wildcard\npattern (_) is next to a rest pattern (..).\n\n_NOTE_: While"],"type_repetition_in_bounds":[C[2],"This lint warns about unnecessary type repetitions in trait bounds"],"manual_unwrap_or":["Warn","Finds patterns that reimplement Option::unwrap_or or Result::unwrap_or."],"box_vec":["Warn","Checks for use of Box<Vec<_>> anywhere in the code.\nCheck the [Box documentation](https://doc.rust-l"],"out_of_bounds_indexing":["Deny","Checks for out of bounds array indexing with a constant\nindex."],"temporary_assignment":["Warn","Checks for construction of a structure or tuple just to\nassign a value in it."],"cast_ptr_alignment":[C[2],"Checks for casts from a less-strictly-aligned pointer to a\nmore-strictly-aligned pointer"],"min_max":["Deny","Checks for expressions where std::cmp::min and max are\nused to clamp values, but switched so that th"],"misaligned_transmute":[C[0],C[1]],"mut_mutex_lock":["Warn","Checks for &mut Mutex::lock calls"],"tabs_in_doc_comments":["Warn","Checks doc comments for usage of tab characters."],"borrowed_box":["Warn","Checks for use of &Box<T> anywhere in the code.\nCheck the [Box documentation](https://doc.rust-lang."],"manual_strip":["Warn","Suggests using strip_{prefix,suffix} over str::{starts,ends}_with and slicing using\nthe pattern's le"],"deref_addrof":["Warn","Checks for usage of *& and *&mut in expressions."],"cast_sign_loss":[C[2],"Checks for casts from a signed to an unsigned numerical\ntype. In this case, negative values wrap aro"],"empty_loop":["Warn","Checks for empty loop expressions."],"unneeded_field_pattern":[C[2],"Checks for structure field patterns bound to wildcards."],"mut_mut":[C[2],"Checks for instances of mut mut references."],"copy_iterator":[C[2],"Checks for types that implement Copy as well as\nIterator."],"future_not_send":[C[2],"This lint requires Future implementations returned from\nfunctions and methods to implement the Send "],"clone_on_ref_ptr":[C[2],"Checks for usage of .clone() on a ref-counted pointer,\n(Rc, Arc, rc::Weak, or sync::Weak), and sugge"],"iter_nth_zero":["Warn","Checks for the use of iter.nth(0)."],"option_option":[C[2],"Checks for use of Option<Option<_>> in function signatures and type\ndefinitions"],"ref_option_ref":[C[2],"Checks for usage of &Option<&T>."],"used_underscore_binding":[C[2],"Checks for the use of bindings with a single leading\nunderscore."],"no_effect":["Warn","Checks for statements which have no effect."],"print_stdout":[C[2],"Checks for printing on *stdout*. The purpose of this lint\nis to catch debugging remnants."],"trivially_copy_pass_by_ref":[C[2],"Checks for functions taking arguments by reference, where\nthe argument type is Copy and small enough"],"zero_divided_by_zero":["Warn","Checks for 0.0 / 0.0."],"option_as_ref_deref":["Warn","Checks for usage of _.as_ref().map(Deref::deref) or it's aliases (such as String::as_str)."],"drop_ref":["Deny","Checks for calls to std::mem::drop with a reference\ninstead of an owned value."],"temporary_cstring_as_ptr":[C[0],C[1]],"float_arithmetic":[C[2],"Checks for float arithmetic."],"integer_division":[C[2],"Checks for division of integers"],"suspicious_unary_op_formatting":["Warn","Checks the formatting of a unary operator on the right hand side\nof a binary operator. It lints if t"],"cognitive_complexity":[C[2],"Checks for methods with high cognitive complexity."],"drop_copy":["Deny","Checks for calls to std::mem::drop with a value\nthat derives the Copy trait"],"modulo_one":["Deny","Checks for getting the remainder of a division by one or minus\none."],"needless_doctest_main":["Warn","Checks for fn main() { .. } in doctests"],"needless_lifetimes":["Warn","Checks for lifetime annotations which can be removed by\nrelying on lifetime elision."],"double_comparisons":["Warn","Checks for double comparisons that could be simplified to a single expression."],"unknown_clippy_lints":["Warn","Checks for allow/warn/deny/forbid attributes with scoped clippy\nlints and if those lints exist in cl"],"cmp_null":["Warn","This lint checks for equality comparisons with ptr::null"],"disallowed_method":[C[2],"Lints for specific trait methods defined in clippy.toml"],"mixed_case_hex_literals":["Warn","Warns on hexadecimal literals with mixed-case letter\ndigits."],"to_string_in_display":["Deny","Checks for uses of to_string() in Display traits."],"dbg_macro":[C[2],"Checks for usage of dbg!() macro."],"string_lit_as_bytes":[C[2],"Checks for the as_bytes method called on string literals\nthat contain only ASCII characters."],"unstable_as_mut_slice":[C[0],C[1]],"missing_docs_in_private_items":[C[2],"Warns if there is missing doc for any documentable item\n(public or private)."],"filter_next":["Warn","Checks for usage of _.filter(_).next()."],"not_unsafe_ptr_arg_deref":["Deny","Checks for public functions that dereference raw pointer\narguments but are not marked unsafe."],"mem_discriminant_non_enum":["Deny","Checks for calls of mem::discriminant() on a non-enum type."],"float_cmp_const":[C[2],"Checks for (in-)equality comparisons on floating-point\nvalue and constant, except in functions calle"],"explicit_write":["Warn","Checks for usage of write!() / writeln()! which can be\nreplaced with (e)print!() / (e)println!()"],"bool_comparison":["Warn","Checks for expressions of the form x == true,\nx != true and order comparisons such as x < true (or v"],"double_parens":["Warn","Checks for unnecessary double parentheses."],"match_like_matches_macro":["Warn","Checks for match  or if let expressions producing a\nbool that could be written using matches!"],"almost_swapped":["Deny","Checks for foo = bar; bar = foo sequences."],"panicking_unwrap":["Deny","Checks for calls of unwrap[_err]() that will always fail."],"clone_double_ref":["Deny","Checks for usage of .clone() on an &&T."],"match_same_arms":[C[2],"Checks for match with identical arm bodies."],"panic_in_result_fn":[C[2],"Checks for usage of panic!, unimplemented!, todo!, unreachable! or assertions in a function of type "],"default_trait_access":[C[2],"Checks for literal calls to Default::default()."],"for_kv_map":["Warn","Checks for iterating a map (HashMap or BTreeMap) and\nignoring either the keys or values."],"path_buf_push_overwrite":[C[2],"* Checks for [push](https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push)\ncalls on Pat"],"redundant_allocation":["Warn","Checks for use of redundant allocations anywhere in the code."],"reversed_empty_ranges":["Deny","Checks for range expressions x..y where both x and y\nare constant and x is greater or equal to y."],"shadow_unrelated":[C[2],"Checks for bindings that shadow other bindings already in\nscope, either without a initialization or "],"cast_ref_to_mut":["Deny","Checks for casts of &T to &mut T anywhere in the code."],"single_component_path_imports":["Warn","Checking for imports with single component use path."],"forget_ref":["Deny","Checks for calls to std::mem::forget with a reference\ninstead of an owned value."],"string_extend_chars":["Warn","Checks for the use of .extend(s.chars()) where s is a\n&str or String."],"large_digit_groups":[C[2],"Warns if the digits of an integral or floating-point\nconstant are grouped into groups that\nare too l"],"suspicious_operation_groupings":["Warn","Checks for unlikely usages of binary operators that are almost\ncertainly typos and/or copy/paste err"],"type_complexity":["Warn","Checks for types used in structs, parameters and let\ndeclarations above a certain complexity thresho"],"mutable_key_type":["Deny","Checks for sets/maps with mutable key types."],"inline_asm_x86_intel_syntax":[C[2],"Checks for usage of Intel x86 assembly syntax."],"checked_conversions":[C[2],"Checks for explicit bounds checking when casting."],"doc_markdown":[C[2],"Checks for the presence of _, :: or camel-case words\noutside ticks in documentation."],"assertions_on_constants":["Warn","Checks for assert!(true) and assert!(false) calls."],"missing_const_for_fn":[C[2],"Suggests the use of const in functions and methods where possible."],"fn_params_excessive_bools":[C[2],"Checks for excessive use of\nbools in function definitions."],"inherent_to_string_shadow_display":["Deny","Checks for the definition of inherent methods with a signature of to_string(&self) -> String and if "],"redundant_static_lifetimes":["Warn","Checks for constants and statics with an explicit 'static lifetime."],"cast_possible_wrap":[C[2],"Checks for casts from an unsigned type to a signed type of\nthe same size. Performing such a cast is "],"duplicate_underscore_argument":["Warn","Checks for function arguments having the similar names\ndiffering by an underscore."],"let_underscore_drop":[C[2],"Checks for let _ = <expr>\nwhere expr has a type that implements Drop"],"module_inception":["Warn","Checks for modules that have the same name as their\nparent module"],"infallible_destructuring_match":["Warn","Checks for matches being used to destructure a single-variant enum\nor tuple struct where a let will "],"field_reassign_with_default":["Warn","Checks for immediate reassignment of fields initialized\nwith Default::default()."],"match_wildcard_for_single_variants":[C[2],"Checks for wildcard enum matches for a single variant."],"mut_from_ref":["Deny","This lint checks for functions that take immutable\nreferences and return mutable ones."],"suspicious_else_formatting":["Warn","Checks for formatting of else. It lints if the else\nis followed immediately by a newline or the else"],"ptr_eq":["Warn","Use std::ptr::eq when applicable"],"modulo_arithmetic":[C[2],"Checks for modulo arithmetic."],"needless_continue":[C[2],"The lint checks for if-statements appearing in loops\nthat contain a continue statement in either the"],"vec_resize_to_zero":["Deny","Finds occurrences of Vec::resize(0, an_int)"],"todo":[C[2],"Checks for usage of todo!."],"result_unit_err":["Warn","Checks for public functions that return a Result\nwith an Err type of (). It suggests using a custom "],"new_ret_no_self":["Warn","Checks for new not returning a type that contains Self."],"redundant_pattern":["Warn","Checks for patterns in the form name @ _."],"unnecessary_wraps":["Warn","Checks for private functions that only return Ok or Some."],"fallible_impl_from":[C[2],"Checks for impls of From<..> that contain panic!() or unwrap()"],"panic":[C[2],"Checks for usage of panic!."],"if_let_some_result":["Warn","* Checks for unnecessary ok() in if let."],"filter_map_next":[C[2],"Checks for usage of _.filter_map(_).next()."],"implicit_return":[C[2],"Checks for missing return statements at the end of a block."],"blanket_clippy_restriction_lints":["Warn","Checks for warn/deny/forbid attributes targeting the whole clippy::restriction category."],"explicit_counter_loop":["Warn","Checks for loops over slices with an explicit counter\nand suggests the use of .enumerate()."],"regex_macro":[C[0],C[1]],"bind_instead_of_map":["Warn","Checks for usage of _.and_then(|x| Some(y)), _.and_then(|x| Ok(y)) or\n_.or_else(|x| Err(y))."],"enum_clike_unportable_variant":["Deny","Checks for C-like enumerations that are\nrepr(isize/usize) and have values that don't fit into an i32"],"flat_map_identity":["Warn","Checks for usage of flat_map(|x| x)."],"inline_always":[C[2],"Checks for items annotated with #[inline(always)],\nunless the annotated function is empty or simply "],"transmute_int_to_float":["Warn","Checks for transmutes from an integer to a float."],"unnecessary_unwrap":["Warn","Checks for calls of unwrap[_err]() that cannot fail."],"shadow_reuse":[C[2],"Checks for bindings that shadow other bindings already in\nscope, while reusing the original value."],"while_immutable_condition":["Deny","Checks whether variables used within while loop condition\ncan be (and are) mutated in the body."],"forget_copy":["Deny","Checks for calls to std::mem::forget with a value that\nderives the Copy trait"],"zst_offset":["Deny","Checks for offset(_), wrapping_{add, sub}, etc. on raw pointers to\nzero-sized types"],"create_dir":[C[2],"Checks usage of std::fs::create_dir and suggest using std::fs::create_dir_all instead."],"infinite_iter":["Deny","Checks for iteration that is guaranteed to be infinite."],"redundant_closure_for_method_calls":[C[2],"Checks for closures which only invoke a method on the closure\nargument and can be replaced by refere"],"await_holding_lock":[C[2],"Checks for calls to await while holding a\nnon-async-aware MutexGuard."],"cmp_nan":["Deny","Checks for comparisons to NaN."],"eval_order_dependence":["Warn","Checks for a read and a write to the same variable where\nwhether the read occurs before or after the"],"if_let_mutex":["Deny","Checks for Mutex::lock calls in if let expression\nwith lock calls in any of the else blocks."],"needless_borrowed_reference":["Warn","Checks for useless borrowed references."],"double_must_use":["Warn","Checks for a [#[must_use]] attribute without\nfurther information on functions and methods that retur"],"extra_unused_lifetimes":["Warn","Checks for lifetimes in generics that are never used\nanywhere else."],"ineffective_bit_mask":["Deny","Checks for bit masks in comparisons which can be removed\nwithout changing the outcome. The basic str"],"inefficient_to_string":[C[2],"Checks for usage of .to_string() on an &&T where\nT implements ToString directly (like &&str or &&Str"],"missing_errors_doc":[C[2],"Checks the doc comments of publicly visible functions that\nreturn a Result type and warns if there i"],"slow_vector_initialization":["Warn","Checks slow zero-filled vector initialization"],"large_stack_arrays":[C[2],"Checks for local arrays that may be too large."],"await_holding_refcell_ref":[C[2],"Checks for calls to await while holding a\nRefCell Ref or RefMut."],"float_equality_without_abs":["Deny","Checks for statements of the form (a - b) < f32::EPSILON or\n(a - b) < f64::EPSILON. Notes the missin"],"mem_replace_with_default":["Warn","Checks for std::mem::replace on a value of type\nT with T::default()."],"multiple_crate_versions":[C[2],"Checks to see if multiple versions of a crate are being\nused."],"inconsistent_digit_grouping":["Warn","Warns if an integral or floating-point constant is\ngrouped inconsistently with underscores."],"replace_consts":[C[0],C[1]],"enum_glob_use":[C[2],"Checks for use Enum::*."],"match_overlapping_arm":["Warn","Checks for overlapping match arms."],"duration_subsec":["Warn","Checks for calculation of subsecond microseconds or milliseconds\nfrom other Duration methods."],"same_functions_in_if_condition":[C[2],"Checks for consecutive ifs with the same function call."],"short_circuit_statement":["Warn","Checks for the use of short circuit boolean conditions as\na\nstatement."],"transmute_ptr_to_ref":["Warn","Checks for transmutes from a pointer to a reference."],"approx_constant":["Deny","Checks for floating point literals that approximate\nconstants which are defined in\n[std::f32::consts"],"ok_expect":["Warn","Checks for usage of ok().expect(..)."],"integer_arithmetic":[C[2],"Checks for integer arithmetic operations which could overflow or panic.\n\nSpecifically, checks for an"],"else_if_without_else":[C[2],"Checks for usage of if expressions with an else if branch,\nbut without a final else branch."],"transmute_float_to_int":["Warn","Checks for transmutes from a float to an integer."],"invalid_atomic_ordering":["Deny","Checks for usage of invalid atomic\nordering in atomic loads/stores/exchanges/updates and\nmemory fenc"],"invalid_upcast_comparisons":[C[2],"Checks for comparisons where the relation is always either\ntrue or false, but where one side has bee"],"new_without_default":["Warn","Checks for types with a fn new() -> Self method and no\nimplementation of\n[Default](https://doc.rust-"],"inline_fn_without_body":["Deny","Checks for #[inline] on trait methods without bodies"],"try_err":["Warn","Checks for usages of Err(x)?."],"unseparated_literal_suffix":[C[2],"Warns if literal suffixes are not separated by an\nunderscore."],"invalid_regex":["Deny","Checks [regex](https://crates.io/crates/regex) creation\n(with Regex::new, RegexBuilder::new, or Rege"],"from_iter_instead_of_collect":["Warn","Checks for from_iter() function calls on types that implement the FromIterator\ntrait."],"partialeq_ne_impl":["Warn","Checks for manual re-implementations of PartialEq::ne."],"stable_sort_primitive":["Warn","When sorting primitive values (integers, bools, chars, as well\nas arrays, slices, and tuples of such"],"useless_asref":["Warn","Checks for usage of .as_ref() or .as_mut() where the\ntypes before and after the call are the same."],"iter_nth":["Warn","Checks for use of .iter().nth() (and the related\n.iter_mut().nth()) on standard library types with O"],"unstable_as_slice":[C[0],C[1]],"unwrap_in_result":[C[2],"Checks for functions of type Result that contain expect() or unwrap()"],"manual_ok_or":[C[2],"Finds patterns that reimplement Option::ok_or."],"needless_return":["Warn","Checks for return statements at the end of a block."],"or_fun_call":["Warn","Checks for calls to .or(foo(..)), .unwrap_or(foo(..)),\netc., and suggests to use or_else, unwrap_or_"],"vec_box":["Warn","Checks for use of Vec<Box<T>> where T: Sized anywhere in the code.\nCheck the [Box documentation](htt"],"int_plus_one":["Warn","Checks for usage of x >= y + 1 or x - 1 >= y (and <=) in a block"],"iter_cloned_collect":["Warn","Checks for the use of .cloned().collect() on slice to\ncreate a Vec."],"get_unwrap":[C[2],"Checks for use of .get().unwrap() (or\n.get_mut().unwrap) on a standard library type which implements"],"deprecated_cfg_attr":["Warn","Checks for #[cfg_attr(rustfmt, rustfmt_skip)] and suggests to replace it\nwith #[rustfmt::skip]."],"range_plus_one":[C[2],"Checks for exclusive ranges where 1 is added to the\nupper bound, e.g., x..(y+1)."],"redundant_pattern_matching":["Warn","Lint for redundant pattern matching over Result, Option,\nstd::task::Poll or std::net::IpAddr"],"transmuting_null":["Deny","Checks for transmute calls which would receive a null pointer."],"writeln_empty_string":["Warn","This lint warns when you use writeln!(buf, \"\") to\nprint a newline."],"redundant_closure":["Warn","Checks for closures which just call another function where\nthe function can be called directly. unsa"],"get_last_with_len":["Warn","Checks for using x.get(x.len() - 1) instead of\nx.last()."],"similar_names":[C[2],"Checks for names that are very similar and thus confusing."],"string_to_string":[C[2],"This lint checks for .to_string() method calls on values of type String."],"chars_next_cmp":["Warn","Checks for usage of .chars().next() on a str to check\nif it starts with a given char."],"len_without_is_empty":["Warn","Checks for items that implement .len() but not\n.is_empty()."],"range_minus_one":[C[2],"Checks for inclusive ranges where 1 is subtracted from\nthe upper bound, e.g., x..=(y-1)."],"module_name_repetitions":[C[2],"Detects type names that are prefixed or suffixed by the\ncontaining module's name."],"chars_last_cmp":["Warn","Checks for usage of _.chars().last() or\n_.chars().next_back() on a str to check if it ends with a gi"],"filetype_is_file":[C[2],"Checks for FileType::is_file()."],"if_let_redundant_pattern_matching":[C[0],C[1]],"explicit_into_iter_loop":[C[2],"Checks for loops on y.into_iter() where y will do, and\nsuggests the latter."],"map_unwrap_or":[C[2],"Checks for usage of option.map(_).unwrap_or(_) or option.map(_).unwrap_or_else(_) or\nresult.map(_).u"],"deprecated_semver":["Deny","Checks for #[deprecated] annotations with a since\nfield that is not a valid semantic version."],"if_not_else":[C[2],"Checks for usage of ! or != in an if condition with an\nelse branch."],"needless_bool":["Warn","Checks for expressions of the form if c { true } else {\nfalse } (or vice versa) and suggests using t"],"match_on_vec_items":[C[2],"Checks for match vec[idx] or match vec[n..m]."],"must_use_candidate":[C[2],"Checks for public functions that have no\n[#[must_use]] attribute, but return something not already m"],"needless_update":["Warn","Checks for needlessly including a base struct on update\nwhen all fields are changed anyway."],"never_loop":["Deny","Checks for loops that will always break, return or\ncontinue an outer loop."],"option_map_or_none":["Warn","Checks for usage of _.map_or(None, _)."],"possible_missing_comma":["Deny","Checks for possible missing comma in an array. It lints if\nan array element is a binary operator exp"],"rest_pat_in_fully_bound_structs":[C[2],"Checks for unnecessary '..' pattern binding on struct when all fields are explicitly matched."],"string_from_utf8_as_bytes":["Warn","Check if the string is transformed to byte array and casted back to string."],"suspicious_op_assign_impl":["Deny","Lints for suspicious operations in impls of OpAssign, e.g.\nsubtracting elements in an AddAssign impl"],"naive_bytecount":["Warn","Checks for naive byte counts"],"match_single_binding":["Warn","Checks for useless match that binds to only one value."],"too_many_lines":[C[2],"Checks for functions with a large amount of lines."],"transmute_int_to_bool":["Warn","Checks for transmutes from an integer to a bool."],"unnecessary_filter_map":["Warn","Checks for filter_map calls which could be replaced by filter or map.\nMore specifically it checks if"],"unused_io_amount":["Deny","Checks for unused written/read amount."],"unsafe_removed_from_name":["Warn","Checks for imports that remove \"unsafe\" from an item's\nname."],"boxed_local":["Warn","Checks for usage of Box<T> where an unboxed T would\nwork fine."],"map_identity":["Warn","Checks for instances of map(f) where f is the identity function."],"precedence":["Warn","Checks for operations where precedence may be unclear\nand suggests to add parentheses. Currently it "],"suspicious_assignment_formatting":["Warn","Checks for use of the non-existent =*, =! and =-\noperators."],"undropped_manually_drops":["Deny","Prevents the safe std::mem::drop function from being called on std::mem::ManuallyDrop."],"unit_arg":["Warn","Checks for passing a unit value as an argument to a function without using a\nunit literal (())."],"let_underscore_must_use":[C[2],"Checks for let _ = <expr>\nwhere expr is #[must_use]"],"manual_saturating_arithmetic":["Warn","Checks for .checked_add/sub(x).unwrap_or(MAX/MIN)."],"non_ascii_literal":[C[2],"Checks for non-ASCII characters in string literals."],"needless_arbitrary_self_type":["Warn","The lint checks for self in fn parameters that\nspecify the Self-type explicitly"],"identity_op":["Warn","Checks for identity operations, e.g., x + 0."],"print_literal":["Warn","This lint warns about the use of literals as print!/println! args."],"items_after_statements":[C[2],"Checks for items declared after some statement in a block."],"mem_forget":[C[2],"Checks for usage of std::mem::forget(t) where t is\nDrop."],"redundant_else":[C[2],"Checks for else blocks that can be removed without changing semantics."],"shadow_same":[C[2],"Checks for bindings that shadow other bindings already in\nscope, while just changing reference level"],"expl_impl_clone_on_copy":[C[2],"Checks for explicit Clone implementations for Copy\ntypes."],"borrow_interior_mutable_const":["Warn","Checks if const items which is interior mutable (e.g.,\ncontains a Cell, Mutex, AtomicXxxx, etc.) has"],"let_underscore_lock":["Deny","Checks for let _ = sync_lock"],"option_if_let_else":[C[2],"Lints usage of if let Some(v) = ... { y } else { x } which is more\nidiomatically done with Option::m"],"assign_ops":[C[0],C[1]],"single_match_else":[C[2],"Checks for matches with two arms where an if let else will\nusually suffice."],"string_add_assign":[C[2],"Checks for string appends of the form x = x + y (without\nlet!)."],"unicode_not_nfc":[C[2],"Checks for string literals that contain Unicode in a form\nthat is not equal to its\n[NFC-recompositio"],"unit_cmp":["Deny","Checks for comparisons to unit. This includes all binary\ncomparisons (like == and <) and asserts."],"multiple_inherent_impl":[C[2],"Checks for multiple inherent implementations of a struct"],"should_assert_eq":[C[0],C[1]],"inline_asm_x86_att_syntax":[C[2],"Checks for usage of AT&T x86 assembly syntax."],"comparison_chain":["Warn","Checks comparison chains written with if that can be\nrewritten with match and cmp."],"double_neg":["Warn","Detects expressions of the form --x."],"if_same_then_else":["Deny","Checks for if/else with the same body as the *then* part\nand the *else* part."],"result_map_or_into_option":["Warn","Checks for usage of _.map_or(None, Some)."],"match_ref_pats":["Warn","Checks for matches where all arms match a reference,\nsuggesting to remove the reference and deref th"],"unnecessary_lazy_evaluations":["Warn","As the counterpart to or_fun_call, this lint looks for unnecessary\nlazily evaluated closures on Opti"],"into_iter_on_ref":["Warn","Checks for into_iter calls on references which should be replaced by iter\nor iter_mut."],"option_env_unwrap":["Deny","Checks for usage of option_env!(...).unwrap() and\nsuggests usage of the env! macro."],"useless_attribute":["Deny","Checks for extern crate and use items annotated with\nlint attributes.\n\nThis lint permits #[allow(unu"],"just_underscores_and_digits":["Warn","Checks if you have variables whose name consists of just\nunderscores and digits."],"verbose_bit_mask":[C[2],"Checks for bit masks that can be replaced by a call\nto trailing_zeros"],"self_assignment":["Deny","Checks for explicit self-assignments."],"match_bool":[C[2],"Checks for matches where match expression is a bool. It\nsuggests to replace the expression with an i"],"large_const_arrays":["Warn","Checks for large const arrays that should\nbe defined as static instead."],"unreachable":[C[2],"Checks for usage of unreachable!."],"unnecessary_cast":["Warn","Checks for casts to the same type, casts of int literals to integer types\nand casts of float literal"],"unsound_collection_transmute":["Deny","Checks for transmutes between collections whose\ntypes have different ABI, size or alignment."],"too_many_arguments":["Warn","Checks for functions with too many parameters."],"unused_self":[C[2],"Checks methods that contain a self argument but don't use it"],"diverging_sub_expression":["Warn","Checks for diverging calls that are not match arms or\nstatements."],"unreadable_literal":[C[2],"Warns if a long integral or floating-point constant does\nnot contain underscores."],"uninit_assumed_init":["Deny","Checks for MaybeUninit::uninit().assume_init()."],"clone_on_copy":["Warn","Checks for usage of .clone() on a Copy type."],"pub_enum_variant_names":[C[2],"Detects public enumeration variants that are\nprefixed or suffixed by the same characters."],"unsafe_derive_deserialize":[C[2],"Checks for deriving serde::Deserialize on a type that\nhas methods using unsafe."],"suspicious_map":["Warn","Checks for calls to map followed by a count."],"declare_interior_mutable_const":["Warn","Checks for declaration of const items which is interior\nmutable (e.g., contains a Cell, Mutex, Atomi"],"imprecise_flops":[C[2],"Looks for floating-point expressions that\ncan be expressed using built-in methods to improve accurac"],"mut_range_bound":["Warn","Checks for loops which have a range bound that is a mutable variable"],"absurd_extreme_comparisons":["Deny","Checks for comparisons where one side of the relation is\neither the minimum or maximum value for its"],"map_collect_result_unit":["Warn","Checks for usage of _.map(_).collect::<Result<(), _>()."],"cmp_owned":["Warn","Checks for conversions to owned values just for the sake\nof a comparison."],"neg_cmp_op_on_partial_ord":["Warn","Checks for the usage of negated comparison operators on types which only implement\nPartialOrd (e.g.,"],"print_stderr":[C[2],"Checks for printing on *stderr*. The purpose of this lint\nis to catch debugging remnants."],"redundant_clone":["Warn","Checks for a redundant clone() (and its relatives) which clones an owned\nvalue that is going to be d"],"size_of_in_element_count":["Deny","Detects expressions where\nsize_of::<T> or size_of_val::<T> is used as a\ncount of elements of type T"],"empty_enum":[C[2],"Checks for enums with no variants."],"implicit_hasher":[C[2],"Checks for public impl or fn missing generalization\nover different hashers and implicitly defaulting"],"single_char_add_str":["Warn","Warns when using push_str/insert_str with a single-character string literal\nwhere push/insert with a"],"serde_api_misuse":["Deny","Checks for mis-uses of the serde API."],"for_loops_over_fallibles":["Deny","Checks for for loops over Option or Result values."],"crosspointer_transmute":["Warn","Checks for transmutes between a type T and *T."],"indexing_slicing":[C[2],"Checks for usage of indexing or slicing. Arrays are special cases, this lint\ndoes report on arrays i"],"manual_async_fn":["Warn","It checks for manual implementations of async functions."],"comparison_to_empty":["Warn","Checks for comparing to an empty slice such as \"\" or [],\nand suggests using .is_empty() where applic"],"mutex_atomic":["Warn","Checks for usages of Mutex<X> where an atomic will do."],"neg_multiply":["Warn","Checks for multiplication by -1 as a form of negation."],"redundant_field_names":["Warn","Checks for fields in struct literals where shorthands\ncould be used."],"iter_next_slice":["Warn","Checks for usage of iter().next() on a Slice or an Array"],"decimal_literal_representation":[C[2],"Warns if there is a better representation for a numeric literal."],"needless_pass_by_value":[C[2],"Checks for functions taking arguments by value, but not\nconsuming them in its\nbody."],"ref_in_deref":["Warn","Checks for references in expressions that use\nauto dereference."],"map_clone":["Warn","Checks for usage of map(|x| x.clone()) or\ndereferencing closures for Copy types, on Iterator or Opti"],"needless_borrow":[C[2],"Checks for address of operations (&) that are going to\nbe dereferenced immediately by the compiler."],"cast_possible_truncation":[C[2],"Checks for casts between numerical types that may\ntruncate large values. This is expected behavior, "],"float_cmp":["Deny","Checks for (in-)equality comparisons on floating-point\nvalues (apart from zero), except in functions"],"option_map_unit_fn":["Warn","Checks for usage of option.map(f) where f is a function\nor closure that returns the unit type ()."],"char_lit_as_u8":["Warn","Checks for expressions where a character literal is cast\nto u8 and suggests using a byte literal ins"],"ifs_same_cond":["Deny","Checks for consecutive ifs with the same condition."],"repeat_once":["Warn","Checks for usage of .repeat(1) and suggest the following method for each types.\n- .to_string() for s"],"single_element_loop":["Warn","Checks whether a for loop has a single element."],"string_add":[C[2],"Checks for all instances of x + _ where x is of type\nString, but only if [string_add_assign](#string"],"implicit_saturating_sub":[C[2],"Checks for implicit saturating subtraction."],"manual_memcpy":["Warn","Checks for for-loops that manually copy items between\nslices that could be optimized by having a mem"],"many_single_char_names":["Warn","Checks for too many variables whose name consists of a\nsingle character."],"unimplemented":[C[2],"Checks for usage of unimplemented!."],"blocks_in_if_conditions":["Warn","Checks for if conditions that use blocks containing an\nexpression, statements or conditions that use"],"transmute_bytes_to_str":["Warn","Checks for transmutes from a &[u8] to a &str."],"cast_lossless":[C[2],"Checks for casts between numerical types that may\nbe replaced by safe conversion functions."],"to_digit_is_some":["Warn","Checks for .to_digit(..).is_some() on chars."],"unnecessary_sort_by":["Warn","Detects uses of Vec::sort_by passing in a closure\nwhich compares the two arguments, either directly "],"match_as_ref":["Warn","Checks for match which is used to add a reference to an\nOption value."],"eq_op":["Deny","Checks for equal operands to comparison, logical and\nbitwise, difference and division binary operato"],"cast_precision_loss":[C[2],"Checks for casts from any numerical to a float type where\nthe receiving type cannot store all values"],"async_yields_async":["Deny","Checks for async blocks that yield values of types\nthat can themselves be awaited."],"into_iter_on_array":[C[0],C[1]],"let_unit_value":[C[2],"Checks for binding a unit value."],"match_wild_err_arm":[C[2],"Checks for arm which matches all errors with Err(_)\nand take drastic actions like panic!."],"question_mark":["Warn","Checks for expressions that could be replaced by the question mark operator."],"trivial_regex":["Warn","Checks for trivial [regex](https://crates.io/crates/regex)\ncreation (with Regex::new, RegexBuilder::"],"linkedlist":[C[2],"Checks for usage of any LinkedList, suggesting to use a\nVec or a VecDeque (formerly called RingBuf)."],"unused_collect":[C[0],C[1]],"derive_hash_xor_eq":["Deny","Checks for deriving Hash but implementing PartialEq\nexplicitly or vice versa."],"iter_skip_next":["Warn","Checks for use of .skip(x).next() on iterators."],"manual_swap":["Warn","Checks for manual swapping."],"builtin_type_shadow":["Warn","Warns if a generic shadows a built-in type."],"invisible_characters":["Deny","Checks for invisible Unicode characters in the code."],"map_err_ignore":[C[2],"Checks for instances of map_err(|_| Some::Enum)"],"transmutes_expressible_as_ptr_casts":["Warn","Checks for transmutes that could be a pointer cast."],"unit_return_expecting_ord":["Deny","Checks for functions that expect closures of type\nFn(...) -> Ord where the implemented closure retur"],"expect_fun_call":["Warn","Checks for calls to .expect(&format!(...)), .expect(foo(..)),\netc., and suggests to use unwrap_or_el"],"mistyped_literal_suffixes":["Deny","Warns for mistyped suffix in literals"],"println_empty_string":["Warn","This lint warns when you use println!(\"\") to\nprint a newline."],"same_item_push":["Warn","Checks whether a for loop is being used to push a constant\nvalue into a Vec."],"unused_label":[C[0],C[1]],"unusual_byte_groupings":["Warn","Warns if hexadecimal or binary literals are not grouped\nby nibble or byte."],"use_debug":[C[2],"Checks for use of Debug formatting. The purpose of this\nlint is to catch debugging remnants."],"use_self":[C[2],"Checks for unnecessary repetition of structure name when a\nreplacement with Self is applicable."],"useless_vec":["Warn","Checks for usage of &vec![..] when using &[..] would\nbe possible."],"wildcard_enum_match_arm":[C[2],"Checks for wildcard enum matches using _."],"len_zero":["Warn","Checks for getting the length of something via .len()\njust to compare to zero, and suggests using .i"],"single_char_pattern":["Warn","Checks for string methods that receive a single-character\nstr as an argument, e.g., _.split(\"x\")."],"mem_replace_option_with_none":["Warn","Checks for mem::replace() on an Option with\nNone."],"useless_transmute":[C[2],"Checks for transmutes to the original type of the object\nand transmutes that could be a cast."],"wildcard_in_or_patterns":["Warn","Checks for wildcard pattern used with others patterns in same match arm."],"missing_safety_doc":["Warn","Checks for the doc comments of publicly visible\nunsafe functions and warns if there is no # Safety s"],"wrong_self_convention":["Warn","Checks for methods with certain name prefixes and which\ndoesn't match how self is taken. The actual "],"mutex_integer":[C[2],"Checks for usages of Mutex<X> where X is an integral\ntype."],"logic_bug":["Deny","Checks for boolean expressions that contain terminals that\ncan be eliminated."],"find_map":[C[2],"Checks for usage of _.find(_).map(_)."],"unused_unit":["Warn","Checks for unit (()) expressions that can be removed."],"while_let_loop":["Warn","Detects loop + match combinations that are easier\nwritten as a while let loop."],"needless_collect":["Warn","Checks for functions collecting an iterator when collect\nis not needed."],"nonminimal_bool":["Warn","Checks for boolean expressions that can be written more\nconcisely."],"wrong_transmute":["Deny","Checks for transmutes that can't ever be correct on any\narchitecture."],"while_let_on_iterator":["Warn","Checks for while let expressions on iterators."],"filter_map":[C[2],"Checks for usage of _.filter(_).map(_),\n_.filter(_).flat_map(_), _.filter_map(_).flat_map(_) and sim"],"zero_prefixed_literal":["Warn","Warns if an integral constant literal starts with 0."],"enum_variant_names":["Warn","Detects enumeration variants that are prefixed or suffixed\nby the same characters."],"map_entry":["Warn","Checks for uses of contains_key + insert on HashMap\nor BTreeMap."],"collapsible_match":["Warn","Finds nested match or if let expressions where the patterns may be \"collapsed\" together\nwithout addi"],"range_step_by_zero":[C[0],C[1]],"unnecessary_fold":["Warn","Checks for using fold when a more succinct alternative exists.\nSpecifically, this checks for folds w"],"empty_line_after_outer_attr":[C[2],"Checks for empty lines after outer attributes"],"large_enum_variant":["Warn","Checks for large size differences between variants on\nenums."],"must_use_unit":["Warn","Checks for a [#[must_use]] attribute on\nunit-returning functions and methods.\n\n[#[must_use]]: https:"],"large_types_passed_by_value":[C[2],"Checks for functions taking arguments by value, where\nthe argument type is Copy and large enough to "],"iterator_step_by_zero":["Deny","Checks for calling .step_by(0) on iterators which panics."],"manual_range_contains":["Warn","Checks for expressions like x >= 3 && x < 8 that could\nbe more readably expressed as (3..8).contains"],"suspicious_arithmetic_impl":["Deny","Lints for suspicious operations in impls of arithmetic operators, e.g.\nsubtracting elements in an Ad"],"useless_conversion":["Warn","Checks for Into, TryInto, From, TryFrom, or IntoIter calls\nwhich uselessly convert to the same type."],"manual_non_exhaustive":["Warn","Checks for manual implementations of the non-exhaustive pattern."],"expect_used":[C[2],"Checks for .expect() calls on Options and Results."],"wildcard_dependencies":[C[2],"Checks for wildcard dependencies in the Cargo.toml."],"erasing_op":["Deny","Checks for erasing operations, e.g., x * 0."],"explicit_deref_methods":[C[2],"Checks for explicit deref() or deref_mut() method calls."],"ptr_offset_with_cast":["Warn","Checks for usage of the offset pointer method with a usize casted to an\nisize."],"missing_inline_in_public_items":[C[2],"it lints if an exported function, method, trait method with default impl,\nor trait method impl is no"],"range_zip_with_len":["Warn","Checks for zipping a collection with the range of\n0.._.len()."],"fn_to_numeric_cast_with_truncation":["Warn","Checks for casts of a function pointer to a numeric type not wide enough to\nstore address."],"ptr_arg":["Warn","This lint checks for function arguments of type &String\nor &Vec unless the references are mutable. I"],"skip_while_next":["Warn","Checks for usage of _.skip_while(condition).next()."],"str_to_string":[C[2],"This lint checks for .to_string() method calls on values of type &str."],"struct_excessive_bools":[C[2],"Checks for excessive\nuse of bools in structs."],"transmute_ptr_to_ptr":["Warn","Checks for transmutes from a pointer to a pointer, or\nfrom a reference to a reference."],"unnested_or_patterns":[C[2],"Checks for unnested or-patterns, e.g., Some(0) | Some(2) and\nsuggests replacing the pattern with a n"],"useless_format":["Warn","Checks for the use of format!(\"string literal with no\nargument\") and format!(\"{}\", foo) where foo is"],"extend_from_slice":[C[0],C[1]],"wildcard_imports":[C[2],"Checks for wildcard imports use _::*."],"rc_buffer":[C[2],"Checks for Rc<T> and Arc<T> when T is a mutable buffer type such as String or Vec."],"fn_address_comparisons":["Deny","Checks for comparisons with an address of a function item."],"suboptimal_flops":[C[2],"Looks for floating-point expressions that\ncan be expressed using built-in methods to improve both\nac"],"blacklisted_name":["Warn","Checks for usage of blacklisted names for variables, such\nas foo."],"toplevel_ref_arg":["Warn","Checks for function arguments and let bindings denoted as\nref."],"pattern_type_mismatch":[C[2],"Checks for patterns that aren't exact representations of the types\nthey are applied to.\n\nTo satisfy "],"map_flatten":[C[2],"Checks for usage of _.map(_).flatten(_),"],"nonsensical_open_options":["Deny","Checks for duplicate open options as well as combinations\nthat make no sense."],"as_conversions":[C[2],"Checks for usage of as conversions."],"needless_range_loop":["Warn","Checks for looping over the range of 0..len of some\ncollection just to get the values by index."],"exit":[C[2],"exit()  terminates the program and doesn't provide a\nstack trace."],"redundant_closure_call":["Warn","Detects closures called in the same expression where they\nare defined."],"excessive_precision":["Warn","Checks for float literals with a precision greater\nthan that supported by the underlying type."],"drop_bounds":[C[0],C[1]],"let_and_return":["Warn","Checks for let-bindings, which are subsequently\nreturned."],"bad_bit_mask":["Deny","Checks for incompatible bit masks in comparisons.\n\nThe formula for detecting if an expression of the"],"cargo_common_metadata":[C[2],"Checks to see if all common metadata is defined in\nCargo.toml. See: https://rust-lang-nursery.github"],"mem_replace_with_uninit":["Deny","Checks for mem::replace(&mut _, mem::uninitialized())\nand mem::replace(&mut _, mem::zeroed())."],"misrefactored_assign_op":["Warn","Checks for a op= a op b or a op= b op a patterns."],"op_ref":["Warn","Checks for arguments to == which have their address\ntaken to satisfy a bound\nand suggests to derefer"],"print_with_newline":["Warn","This lint warns when you use print!() with a format\nstring that ends in a newline."],"search_is_some":["Warn","Checks for an iterator or string search (such as find(),\nposition(), or rposition()) followed by a c"],"overflow_check_conditional":["Warn","Detects classic underflow/overflow checks."],"assign_op_pattern":["Warn","Checks for a = a op b or a = b commutative_op a\npatterns."],"macro_use_imports":[C[2],"Checks for #[macro_use] use...."],"trait_duplication_in_bounds":[C[2],"Checks for cases where generics are being used and multiple\nsyntax specifications for trait bounds a"],"unnecessary_operation":["Warn","Checks for expression statements that can be reduced to a\nsub-expression."],"useless_let_if_seq":[C[2],"Checks for variable declarations immediately followed by a\nconditional affectation."],"explicit_iter_loop":[C[2],"Checks for loops on x.iter() where &x will do, and\nsuggests the latter."],"write_literal":["Warn","This lint warns about the use of literals as write!/writeln! args."],"derive_ord_xor_partial_ord":["Deny","Checks for deriving Ord but implementing PartialOrd\nexplicitly or vice versa."],"fn_to_numeric_cast":["Warn","Checks for casts of function pointers to something other than usize"],"iter_next_loop":["Deny","Checks for loops on x.next()."],"redundant_pub_crate":[C[2],"Checks for items declared pub(crate) that are not crate visible because they\nare inside a private mo"],"write_with_newline":["Warn","This lint warns when you use write!() with a format\nstring that\nends in a newline."],"vtable_address_comparisons":["Deny","Checks for comparisons with an address of a trait vtable."],"wrong_pub_self_convention":[C[2],"This is the same as\n[wrong_self_convention](#wrong_self_convention), but for public items."],"lossy_float_literal":[C[2],"Checks for whole number float literals that\ncannot be represented as the underlying type without los"],"transmute_int_to_char":["Warn","Checks for transmutes from an integer to a char."],"mismatched_target_os":["Deny","Checks for cfg attributes having operating systems used in target family position."]};